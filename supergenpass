#!/usr/bin/env python
# -*- coding: utf-8 -*-
# SuperGenPass password generator
# Based on algorithm at: https://github.com/chriszarate/supergenpass-lib
# Note that to keep this script light, subdomain stripping is not done since it
# requires an external data source like the public suffix list. The domain you
# enter must be (manually) stripped by you.

from __future__ import print_function
from __future__ import unicode_literals
from base64 import b64encode
from getpass import getpass
import argparse
import hashlib
import re
import signal
import sys


def valid(password):
    """
    To be a valid password, it must:
    1. Start with a lowercase letter [a-z].
    2. Contain at least one uppercase letter [A-Z].
    3. Contain at least one numeral [0-9].
    """
    rules = (r'^[a-z]', r'[A-Z]', r'[0-9]')
    return all(re.search(pattern, password.decode()) for pattern in rules)


def generate(password, rounds, algorithm):
    if rounds <= 0:
        if valid(password):
            return password
    password = b64encode(hashlib.new(algorithm, password).digest(),
            b'98').replace(b'=', b'A')
    return generate(password, rounds - 1, algorithm)


def main():
    # Register signal handler to catch ctrl+c to gracefully quit
    signal.signal(signal.SIGINT, lambda signum, frame: sys.exit(1))

    parser = argparse.ArgumentParser(description='Password generator.')
    parser.add_argument('domain', help='Domain without subdomains')
    parser.add_argument('-l', '--length', default=10,
            help='Length of generated password')
    parser.add_argument('-r', '--rounds', default=10,
            help='Number of hash rounds')
    parser.add_argument('-a', '--algorithm', default='md5',
            help='Hashing algorithm')
    args = parser.parse_args()

    master_password = getpass('Master password: ')
    password = '{}:{}'.format(master_password, args.domain).encode('utf-8')
    password = generate(password, args.rounds, args.algorithm)

    print(password[:args.length].decode('utf-8'), end='\n' if
            sys.stdout.isatty() else '')


if __name__ == '__main__':
    sys.exit(main())
